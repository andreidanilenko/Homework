def apply_all_func(int_list, *functions):
    results = {}
    for func in functions:
        results.update({func.__name__: func(int_list)})
    return results


int_list = [6, 20, 15, 9]

min(int_list, key=lambda i: int(i))

max(int_list, key=lambda i: int(i))


def len_(int_list):  # - принимает список, возвращает кол-во элементов в нём.
    result = len(int_list)
    return result


def sum(int_list):  # - принимает список, возвращает сумму его элементов.
    result = 0
    for i in int_list:
        result += i
    return result


def sorted_(int_list):  # - принимает список, возвращает новый отсортированный список на основе переданного.
    result = sorted(int_list)
    return result


print(apply_all_func(int_list, max, min))
print(apply_all_func(int_list, len_, sum, sorted_))



# Домашнее задание по теме "Введение в функциональное программирование"
# Цель: научиться обращаться к функциям, как к объекту и передавать их в другие функции для вызова.
#
# Задача "Вызов разом":
# Напишите функцию apply_all_func(int_list, *functions), которая принимает параметры:
# int_list - список из чисел (int, float)
# *functions - неограниченное кол-во функций (которые применимы к спискам, состоящим из чисел)
# Эта функция должна:
# Вызвать каждую функцию к переданному списку int_list
# Возвращать словарь, где ключом будет название вызванной функции, а значением - её результат работы со списком int_list.
# Пункты задачи:
# В функции apply_all_func создайте пустой словарь results.
# Переберите все функции из *functions.
# При переборе функций записывайте в словарь results результат работы этой функции под ключом её названия.
# Верните словарь results.
# Запустите функцию apply_all_func, передав в неё список из чисел и набор других функций.
# Пример результата выполнения программы:
# В примере используются следующие функции:
# min - принимает список, возвращает минимальное значение из него.
# max - принимает список, возвращает максимальное значение из него.
# len - принимает список, возвращает кол-во элементов в нём.
# sum - принимает список, возвращает сумму его элементов.
# sorted - принимает список, возвращает новый отсортированный список на основе переданного.
# Пример работы кода:
# print(apply_all_func([6, 20, 15, 9], max, min))
# print(apply_all_func([6, 20, 15, 9], len, sum, sorted))
# Вывод на консоль:
# {'max': 20, 'min': 6}
# {'len': 4, 'sum': 50, 'sorted': [6, 9, 15, 20]}
# Примечания:
# Для того, чтобы взять название функции можно обратиться к атрибуту __name__
# При попытке передачи, например, списка из строк, некоторые функции могут работать некорректно или вовсе не работать. Используйте списки чисел.
